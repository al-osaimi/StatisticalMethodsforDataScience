plot(cum_rel_freq, type = "s", main = "Cumulative Relative Frequency Graph of MPG", xlab = "Miles Per Gallon", ylab = "Cumulative Relative Frequency")
plot(cum_freq, type = "s", main = "Cumulative Frequency Graph of MPG", xlab = "Miles Per Gallon", ylab = "Cumulative Frequency")
# Question 2
array_3d(TRUE)
# Question 2
array_3d(TRUE)
# Question 3
qualitative_measures("arg1", "arg2")
array_3d(TRUE)
# Source the four files containing functions
source("file1.R")
source("file2.R")
source("file3.R")
source("file4.R")
# Question 1
#students_dataframe()
# Question 2
array_3d(TRUE)
array_3d()
array_3d()
array_3d()
array_3d()
source("file1.R")
source("file2.R")
source("file3.R")
source("file4.R")
# Question 1
#students_dataframe()
# Question 2
array_3d()
source("file1.R")
source("file2.R")
source("file3.R")
source("file4.R")
# Question 1
#students_dataframe()
# Question 2
array_33d()
# Source the four files containing functions
source("file1.R")
source("file2.R")
source("file3.R")
source("file4.R")
# Question 1
#students_dataframe()
# Question 2
array_33d(TRUE)
# Question 2
array_33d(TRUE)
# Question 2
array_33d(TRUE)
}
if(matrix)
{
print("Create using matrix")
# Create a matrix
matrix1 <- matrix(c(1, 5, 12, 3, 10, 13, 4, 11, 14), nrow = 3, ncol = 3)
matrix2 <- matrix(c(15, 4, 11, 1, 5, 12, 3, 10, 13), nrow = 3, ncol = 3)
# Create the array of two 3x3 matrices
array_3d <- array(c(matrix1 , matrix2), dim = c(3, 3, 2))
}
array_33d <- function(matrix = FALSE)
{
if(matrix)
{
print("Create using matrix")
# Create a matrix
matrix1 <- matrix(c(1, 5, 12, 3, 10, 13, 4, 11, 14), nrow = 3, ncol = 3)
matrix2 <- matrix(c(15, 4, 11, 1, 5, 12, 3, 10, 13), nrow = 3, ncol = 3)
# Create the array of two 3x3 matrices
array_3d <- array(c(matrix1 , matrix2), dim = c(3, 3, 2))
}
else
{
print("Create using vectors")
# Define the two vectors
vector1 <- c(1, 5, 12, 3, 10, 13, 4, 11, 14)
vector2 <- c(15, 4, 11, 1, 5, 12, 3, 10, 13)
# Create the array of two 3x3 matrices
array_3d <- array(c(vector1, vector2), dim = c(3, 3, 2))
}
# Print the array
cat("Array of two 3x3 matrices:\n")
print(array_3d)
# Print the second row of the second matrix
cat("\nSecond row of the second matrix:\n")
print(array_3d[2, , 2])
# Print the element in the 3rd row and 3rd column of the 1st matrix
cat("\nElement in the 3rd row and 3rd column of the 1st matrix:\n")
print(array_3d[3, 3, 1])
}
array_33d()
array_33d(TRUE)
# Question 2
array_33d(TRUE)
# Source the four files containing functions
source("file1.R")
source("file2.R")
source("file3.R")
source("file4.R")
var = readline(prompt = "Enter question number : ");
switch (var,
1 = students_dataframe(),
# Source the four files containing functions
source("file1.R")
source("file2.R")
source("file3.R")
source("file4.R")
var = readline(prompt = "Enter question number : ");
switch (var,
"1" = students_dataframe(),
"2" = array_of_matrices(TRUE),
"3" = qualitative_measures("arg1", "arg2"),
"3" = quantitative_measures(),
"4" = tiktok_google_reviews("md roni")
)
# Source the four files containing functions
source("file1.R")
source("file2.R")
source("file3.R")
source("file4.R")
var = readline(prompt = "Enter question number : ");
switch (var,
"1" = students_dataframe(),
"2" = array_of_matrices(TRUE),
"3" = qualitative_measures("arg1", "arg2"),
"3" = quantitative_measures(),
"4" = tiktok_google_reviews("md roni")
)
1
var = readline(prompt = "Enter question number : ");
var = readline(prompt = "Enter question number : ");
main()
# Define a main function
main <- function() {
# Ask the user how many files they want to execute (up to 4 in this case)
num_files <- as.integer(readline(prompt = "Enter the number of files to source (1 to 4): "))
# Ensure the number of files is between 1 and 4
if (num_files < 1 || num_files > 4) {
stop("Please enter a valid number between 1 and 4")
}
# Source files based on the user input
if (num_files >= 1) {
source("file1.R")
cat("Sourced file1.R\n")
result1 <- function_from_file1(2, 3)  # Example arguments
print(result1)
}
if (num_files >= 2) {
source("file2.R")
cat("Sourced file2.R\n")
result2 <- function_from_file2(3, 4)  # Example arguments
print(result2)
}
if (num_files >= 3) {
source("file3.R")
cat("Sourced file3.R\n")
result3 <- function_from_file3(5)  # Example argument
print(result3)
}
if (num_files == 4) {
source("file4.R")
cat("Sourced file4.R\n")
result4 <- function_from_file4(1, 2, 3)  # Example arguments
print(result4)
}
}
# Call the main function to run the script
main()
# Source the four files containing functions
source("file1.R")
source("file2.R")
source("file3.R")
source("file4.R")
main <- function() {
var = readline(prompt = "Enter question number : ");
switch (var,
"1" = students_dataframe(),
"2" = array_of_matrices(TRUE),
"3" = qualitative_measures("arg1", "arg2"),
"3" = quantitative_measures(),
"4" = tiktok_google_reviews("md roni")
)
}
main()
# Source the four files containing functions
source("file1.R")
source("file2.R")
source("file3.R")
source("file4.R")
main <- function() {
var = readline(prompt = "Enter question number : ");
switch (var,
"1" = students_dataframe(),
"2" = array_of_matrices(TRUE),
"3" = qualitative_measures("arg1", "arg2"),
"3" = quantitative_measures(),
"4" = tiktok_google_reviews("md roni")
)
}
main()
main()
main()
# Source the four files containing functions
source("file1.R")
source("file2.R")
source("file3.R")
source("file4.R")
main <- function() {
qnum <- as.integer(readline(prompt = "Enter the number of question (1 to 4): "))
if (qnum < 1 || qnum > 4) {
print("Please enter a valid number between 1 and 4")
stop()
}
switch (var,
"1" = students_dataframe(),
"2" = array_of_matrices(TRUE),
"3" = qualitative_measures("arg1", "arg2"),
"3" = quantitative_measures(),
"4" = tiktok_google_reviews("md roni")
)
}
main()
# Source the four files containing functions
source("file1.R")
source("file2.R")
source("file3.R")
source("file4.R")
main <- function() {
qnum <- as.integer(readline(prompt = "Enter the number of question (1 to 4): "))
if (qnum < 1 || qnum > 4) {
stop("Please enter a valid number between 1 and 4")
}
switch (var,
"1" = students_dataframe(),
"2" = array_of_matrices(TRUE),
"3" = qualitative_measures("arg1", "arg2"),
"3" = quantitative_measures(),
"4" = tiktok_google_reviews("md roni")
)
}
main()
# Source the four files containing functions
source("file1.R")
source("file2.R")
source("file3.R")
source("file4.R")
main <- function() {
while (TRUE) {
qnum <- as.integer(readline(prompt = "Enter the number of question (1 to 4): or 'q' to quit:  "))
if (tolower(user_input) == "q") {
cat("Exiting the application.\n")
break
}
if (qnum < 1 || qnum > 4) {
stop("Please enter a valid number between 1 and 4")
}
switch (var,
"1" = students_dataframe(),
"2" = array_of_matrices(TRUE),
"3" = qualitative_measures("arg1", "arg2"),
"3" = quantitative_measures(),
"4" = tiktok_google_reviews("md roni")
)
main()
}
}
main()
main()
main()
# Source the four files containing functions
source("file1.R")
source("file2.R")
source("file3.R")
source("file4.R")
main <- function() {
while (TRUE) {
var <- as.integer(readline(prompt = "Enter the number of question (1 to 4): or 'q' to quit:  "))
if (tolower(var) == "q") {
cat("Exiting the application.\n")
break
}
if (var < 1 || var > 4) {
stop("Please enter a valid number between 1 and 4")
}
switch (var,
"1" = students_dataframe(),
"2" = array_of_matrices(TRUE),
"3" = qualitative_measures("arg1", "arg2"),
"3" = quantitative_measures(),
"4" = tiktok_google_reviews("md roni")
)
main()
}
}
main()
main()
print("Please enter a valid number between 1 and 4")
main()
# Source the four files containing functions
source("file1.R")
source("file2.R")
source("file3.R")
source("file4.R")
main <- function() {
while (TRUE) {
var <- readline(prompt = "Enter the number of question (1 to 4): or 'q' to quit:")
if (tolower(var) == "q") {
cat("Exiting the application.\n")
break
}
if (is.na(var) || var < 1 || var > 4) {
print("Please enter a valid number between 1 and 4")
main()
break
}
switch (var,
"1" = students_dataframe(),
"2" = array_of_matrices(TRUE),
"3" = qualitative_measures("arg1", "arg2"),
"3" = quantitative_measures(),
"4" = tiktok_google_reviews("md roni")
)
main()
}
}
main()
# Source the four files containing functions
source("file1.R")
source("file2.R")
source("file3.R")
source("file4.R")
main <- function() {
while (TRUE) {
var <- readline(prompt = "Enter the number of question (1 to 4): or 'q' to quit:")
if (tolower(var) == "q") {
cat("Exiting the application.\n")
break
}
if (is.na(var) || var < 1 || var > 4) {
print("Please enter a valid number between 1 and 4")
main()
break
}
switch (var,
"1" = students_dataframe(),
"2" = array_of_matrices(TRUE),
"3" = qualitative_measures("arg1", "arg2"),
"3" = quantitative_measures(),
"4" = tiktok_google_reviews("md roni")
)
main()
}
}
main()
main()
main()
main()
main()
# Source the four files containing functions
source("file1.R")
source("file2.R")
source("file3.R")
source("file4.R")
main <- function() {
while (TRUE) {
var <- readline(prompt = "Enter the number of question (1 to 4): or 'q' to quit:")
if (tolower(var) == "q") {
cat("Exiting the application.\n")
stop()
}
if (is.na(var) || var < 1 || var > 4) {
print("Please enter a valid number between 1 and 4")
}
if(var == 1)
students_dataframe()
if(var == 2)
array_of_matrices(TRUE)
if(var == 3)
{
#qualitative_measures()
quantitative_measures()
}
if(var == 4)
tiktok_google_reviews("md roni")
}
}
main()
main()
# Source the four files containing functions
source("file1.R")
source("file2.R")
source("file3.R")
source("file4.R")
main <- function() {
while (TRUE) {
var <- readline(prompt = "Enter the number of question (1 to 4): or 'q' to quit:")
if (tolower(var) == "q") {
cat("Exiting the application.\n")
stop()
}
if (is.na(var) || var < 1 || var > 4) {
print("Please enter a valid number between 1 and 4")
}
if(var == 1)
students_dataframe()
if(var == 2)
array_of_matrices(TRUE)
if(var == 3)
{
#qualitative_measures()
quantitative_measures()
}
if(var == 4)
tiktok_google_reviews("md roni")
}
}
main()
# Source the four files containing functions
source("file1.R")
source("file2.R")
source("file3.R")
source("file4.R")
main <- function() {
while (TRUE) {
var <- readline(prompt = "Enter the number of question (1 to 4): or 'q' to quit:")
if (tolower(var) == "q") {
cat("Exiting the application.\n")
stop()
}
if (is.na(var) || var < 1 || var > 4) {
print("Please enter a valid number between 1 and 4")
}
if(var == 1)
students_dataframe()
if(var == 2)
array_of_matrices(TRUE)
if(var == 3)
{
qualitative_measures()
quantitative_measures()
}
if(var == 4)
tiktok_google_reviews("md roni")
}
}
main()
q()
tiktok_google_reviews <- function(user_name = "md roni") {
#A. Read the CSV.
tiktok_reviews <- read.csv(".\\data\\tiktok_google_play_reviews.csv")
print("B. Print out the summary of the dataset.")
summary(tiktok_reviews)
print("C. Identify the structure of the dataset (types of variables).")
str(tiktok_reviews)
print("D. Print out the first 10 records.")
head(tiktok_reviews,10)
print("D. Print out the first 10 records (printing issue may accurs with some terminal).")
for (i in 1:10) {
print(tiktok_reviews[i,])
}
print("E. Print out the content (review) and score for given user name which is (md roni).")
md_roni_data <- subset(tiktok_reviews, userName == "md roni")
# Print content (review) and score
md_roni_data[, c("content", "score")]
print(md_roni_data)
}
tiktok_google_reviews()
data(HairEyeColor)
# Convert the dataset to a dataframe
df <- as.data.frame(HairEyeColor)
#calculate relative frequency table for 'Hair' column
rel_freq <- table(df$Hair)/length(df$Hair)
# Display the relative frequency
print(rel_freq)
# Bar Graph
barplot(rel_freq*100, main = "Bar Plot of Hair Color", col = rainbow(length(rel_freq)) , xlab = "Hair Color", ylab = "Relative Frequency %")
# Pie Chart
p
data(HairEyeColor)
# Convert the dataset to a dataframe
df <- as.data.frame(HairEyeColor)
#calculate relative frequency table for 'Hair' column
rel_freq <- table(df$Hair)/length(df$Hair)
# Display the relative frequency
print(rel_freq)
# Bar Graph
barplot(rel_freq*100, main = "Bar Plot of Hair Color", col = rainbow(length(rel_freq)) , xlab = "Hair Color", ylab = "Relative Frequency %")
# Pie Chart
pie(rel_freq, main = "Pie Chart of Hair Color", col = rainbow(length(rel_freq)))
data(airquality)
# cumulative frequency for the Temp column
cumulative_freq <- cumsum(table(airquality$Temp))
plot(cumulative_freq, type="s", main="Cumulative Frequency of Temperature", xlab="Temperature", ylab="Cumulative Frequency")
# Cumulative relative frequency of Temp
cumulative_rel_freq <- cumsum(prop.table(table(airquality$Temp)))
plot(cumulative_rel_freq, type="s", main="Cumulative Relative Frequency of Temperature", xlab="Temperature", ylab="Cumulative Relative Frequency")
# Scatter plot between Temp and Wind
plot(airquality$Temp, airquality$Wind, main="Scatter Plot of Temperature vs Wind", xlab="Temperature (F)", ylab="Wind Speed", col= 'gray', pch=19)
# A. Create students data frame
students <- data.frame(
id = c(1, 2, 3, 4, 5),
name = c("Ali", "Sara", "Sami", "Nora", "Aymen"),
level = c("Primary", "secondary", "Bachelor", "Master", "PhD"),
DoB = as.Date(c("2001-04-05", "2000-12-12", "1998-08-21", "1986-11-30", "1984-07-15"))
)
# B. Add a "GPA" column with random GPA
students$GPA <- round(runif(5, min = 0, max = 5), 2)
# Display students data frame
print(students)
# Display the summary
summary(students)
